out <- readRDS('/home/asalim/poisRUV/analysis/rachel/results/week1_Apr2020/rachel_wk1_ruvIIInb_K7La0.2Lb2_0.7.1.2.disp.rds')
sce.ruv3nb <- makeSCE(out,colData(sce),batch=as.numeric(batch))
set.seed(8234)
sce.ruv3nb <- runUMAP(sce.ruv3nb,exprs_values = "quantile2")
plotUMAP(
sce.ruv3nb,
colour_by = "logLS",point_alpha=0.8, point_size=0.8)+
ggtitle("rQuantile-K=7")
plotUMAP(
sce.ruv3nb,
colour_by = "treatment",point_alpha=0.8, point_size=0.8) +
ggtitle("rQuantile-K=7")
plotUMAP(
sce.ruv3nb,
colour_by = "plate_number",point_alpha=0.8, point_size=0.8) +
ggtitle("rQuantile-K=7")
tmp <- subset(sce.ruv3nb,select=sce$cell_line=='Granta')
plotUMAP(
tmp,
colour_by = "plate_number",point_alpha=0.8, point_size=0.8) +
ggtitle("rQuantile-K=7")
set.seed(8234)
sce <- runUMAP(sce,exprs_values = "logcounts")
plotUMAP(
sce,
colour_by = "logLS",point_alpha=0.8, point_size=0.8)+
ggtitle("Original")
plotUMAP(
sce,
colour_by = "treatment",point_alpha=0.8, point_size=0.8) +
ggtitle("Original")
plotUMAP(
sce,
colour_by = "plate_number",point_alpha=0.8, point_size=0.8) +
ggtitle("Original")
tmp <- subset(sce,select=sce$cell_line=='Granta')
plotUMAP(
tmp,
colour_by = "plate_number",point_alpha=0.8, point_size=0.8) +
ggtitle("Original")
reducedDim(sce.ruv3nb,type='UMAP'[1,])
reducedDim(sce.ruv3nb,type='UMAP'[1,]
)
reducedDim(sce.ruv3nb,type='UMAP')[1,]
silhouette(as.numeric(batch),dist(reducedDim(sce.ruv3nb,type='UMAP')))
summary(cluster::silhouette(as.numeric(batch),dist(reducedDim(sce.ruv3nb,type='UMAP')))[,2])
summary(cluster::silhouette(as.numeric(batch),dist(reducedDim(sce.ruv3nb,type='UMAP')))[,3])
summary(cluster::silhouette(as.numeric(batch),dist(reducedDim(sce,type='UMAP')))[,3])
summary(cluster::silhouette(as.numeric(sce$treatment),dist(reducedDim(sce,type='UMAP')))[,3])
summary(cluster::silhouette(as.numeric(sce$treatment),dist(reducedDim(sce.ruv3nb,type='UMAP')))[,3])
sce.fmnn <- batchelor::mnnCorrect(sce,batch=sce$batch)
colData(sce.fmnn) <- colData(sce)
sce.fmnn$logLS <- log10(colSums(assays(sce)$counts))
sce.fmnn <- runUMAP(sce.fmnn, exprs_values = "corrected")
assays(sce.fmnn)$logcounts <-  assays(sce)$logcounts[match(rownames(sce.fmnn),rownames(sce)),]
summary(cluster::silhouette(as.numeric(sce$treatment),dist(reducedDim(sce.fmnn,type='UMAP')))[,3])
plotUMAP(
sce.fmnn,
colour_by = "logLS",point_alpha=0.8, point_size=0.8)+
ggtitle("mnnCorrected")
plotUMAP(
sce.fmnn,
colour_by = "treatment",point_alpha=0.8, point_size=0.8) +
ggtitle("mnnCorrected")
plotUMAP(
sce.fmnn,
colour_by = "plate_number",point_alpha=0.8, point_size=0.8) +
ggtitle("mnnCorrected")
tmp <- subset(sce.fmnn,select=sce.fmnn$cell_line=='Granta')
plotUMAP(
tmp,
colour_by = "plate_number",point_alpha=0.8, point_size=0.8) +
ggtitle("mnnCorrected")
# Chunk 1: setup
library(SingleCellExperiment)
library(here)
library(rmarkdown)
library(BiocStyle)
library(scran)
library(janitor)
library(scater)
source(here("analysis", "helper_functions.R"))
#renv::init()
# NOTE: Using multiple cores siezes up my laptop. Can use more on unix box.
options("mc.cores" = ifelse(Sys.info()[["nodename"]] == "PC1331", 1L, 16L))
register(MulticoreParam(workers = getOption("mc.cores")))
knitr::opts_chunk$set(fig.path = "../docs/C040_Thijssen_merge_files/")
# Chunk 2
sce <- readRDS(here("data", "SCEs", "C040_Thijssen.preprocessed.SCE.rds"))
# choose only plates that has week 1 data
sel.plates <- na.omit(unique(colData(sce)$plate_number[colData(sce)$week==1]))
sce= subset(sce,select= (plate_number %in% sel.plates))
ct       <- factor(colData(sce)$treatment)
batch    <- factor(colData(sce)$plate_number)
knitr::kable(table(ct,batch),caption='Number of Cells in Each Treatment x Plate combination')
# Chunk 1: setup
library(SingleCellExperiment)
library(here)
library(rmarkdown)
library(BiocStyle)
library(scran)
library(janitor)
library(scater)
source(here("analysis", "helper_functions.R"))
#renv::init()
# NOTE: Using multiple cores siezes up my laptop. Can use more on unix box.
options("mc.cores" = ifelse(Sys.info()[["nodename"]] == "PC1331", 1L, 16L))
register(MulticoreParam(workers = getOption("mc.cores")))
knitr::opts_chunk$set(fig.path = "../docs/C040_Thijssen_merge_files/")
# Chunk 2
sce <- readRDS(here("data", "SCEs", "C040_Thijssen.preprocessed.SCE.rds"))
# choose only plates that has week 1 data
sel.plates <- na.omit(unique(colData(sce)$plate_number[colData(sce)$week==1]))
sce= subset(sce,select= (plate_number %in% sel.plates))
ct       <- factor(colData(sce)$treatment)
batch    <- factor(colData(sce)$plate_number)
knitr::kable(table(ct,batch),caption='Number of Cells in Each Treatment x Plate combination')
# Chunk 3
boxplot(split(log10(colSums(assays(sce)$counts)),batch),xlab='plate_number',ylab='log10 LS')
# Chunk 4
sce$batch <- factor(paste0(sce$plate_number))
# choose only plates that has week 1 data
sce= subset(sce, rowMeans(assays(sce)$counts)>0.1)
sce$logLS <- log10(colSums(assays(sce)$counts))
sce$plate_number <- factor(sce$plate_number)
library(ruvIIInb)
sce
#30/11/2019
#Alysha M De Livera
#01/11/2019
# Agus Salim
##################################
rm(list=ls())
#################################
library(TENxPBMCData)
#################################
# get donor a
tenx_pbmc.a <- TENxPBMCData(dataset = "frozen_pbmc_donor_a")
# get donor b
tenx_pbmc.b <- TENxPBMCData(dataset = "frozen_pbmc_donor_b")
# get donor c
tenx_pbmc.c <- TENxPBMCData(dataset = "frozen_pbmc_donor_c")
# calculate QC metrics
library(scater)
is_mito <- rep(FALSE,nrow(rowData(tenx_pbmc.a)))
is_mito[grep("MT",rowData(tenx_pbmc.a)$Symbol_TENx)] <- TRUE
tenx_pbmc.a <- scater::calculateQCMetrics(object = tenx_pbmc.a, feature_controls = list(Mt = is_mito))
is_mito <- rep(FALSE,nrow(rowData(tenx_pbmc.b)))
is_mito[grep("MT",rowData(tenx_pbmc.b)$Symbol_TENx)] <- TRUE
tenx_pbmc.b <- scater::calculateQCMetrics(object = tenx_pbmc.b, feature_controls = list(Mt = is_mito))
is_mito <- rep(FALSE,nrow(rowData(tenx_pbmc.c)))
is_mito[grep("MT",rowData(tenx_pbmc.c)$Symbol_TENx)] <- TRUE
tenx_pbmc.c <- scater::calculateQCMetrics(object = tenx_pbmc.c, feature_controls = list(Mt = is_mito))
# perform QC for each dataset
# donor a
libsize_drop <- isOutlier(
metric = tenx_pbmc.a$total_counts,
nmads = 3,
type = "low",
log = TRUE)
feature_drop <- isOutlier(
metric = tenx_pbmc.a$total_features_by_counts,
nmads = 3,
type = "low",
log = TRUE)
mito_drop <- isOutlier(
metric = tenx_pbmc.a$pct_counts_Mt,
nmads = 3,
type = "higher")
# remove cells failed QC
tenx_pbmc.a <- tenx_pbmc.a[, !(libsize_drop | feature_drop | mito_drop)]
# remove low abundant genes
tenx_pbmc.a <- tenx_pbmc.a[rowMeans(assays(tenx_pbmc.a)$counts)>0.01,]
# donor b
libsize_drop <- isOutlier(
metric = tenx_pbmc.b$total_counts,
nmads = 3,
type = "low",
log = TRUE)
feature_drop <- isOutlier(
metric = tenx_pbmc.b$total_features_by_counts,
nmads = 3,
type = "low",
log = TRUE)
mito_drop <- isOutlier(
metric = tenx_pbmc.b$pct_counts_Mt,
nmads = 3,
type = "higher")
# remove cells failed QC
tenx_pbmc.b <- tenx_pbmc.b[, !(libsize_drop | feature_drop | mito_drop)]
# remove low abundant genes
tenx_pbmc.b <- tenx_pbmc.b[rowMeans(assays(tenx_pbmc.b)$counts)>0.01,]
# donor c
libsize_drop <- isOutlier(
metric = tenx_pbmc.c$total_counts,
nmads = 3,
type = "low",
log = TRUE)
feature_drop <- isOutlier(
metric = tenx_pbmc.c$total_features_by_counts,
nmads = 3,
type = "low",
log = TRUE)
mito_drop <- isOutlier(
metric = tenx_pbmc.c$pct_counts_Mt,
nmads = 3,
type = "higher")
# remove cells failed QC
tenx_pbmc.c <- tenx_pbmc.c[, !(libsize_drop | feature_drop | mito_drop)]
# remove low abundant genes
tenx_pbmc.c <- tenx_pbmc.c[rowMeans(assays(tenx_pbmc.a)$counts)>0.01,]
# merge filtered datasets
common.genes <- intersect(rowData(tenx_pbmc.a)$ENSEMBL_ID,rowData(tenx_pbmc.b)$ENSEMBL_ID,rowData(tenx_pbmc.c)$ENSEMBL_ID)
tenx_pbmc.a  <- tenx_pbmc.a[common.genes,]
tenx_pbmc.b  <- tenx_pbmc.b[common.genes,]
tenx_pbmc.c  <- tenx_pbmc.c[common.genes,]
# assign names to cells
rownames(colData(tenx_pbmc.a)) <- paste0('frozenA-',1:ncol(assays(tenx_pbmc.a)$counts))
colnames(assays(tenx_pbmc.a)$counts) <- rownames(colData(tenx_pbmc.a))
rownames(colData(tenx_pbmc.b)) <- paste0('frozenB-',1:ncol(assays(tenx_pbmc.b)$counts))
colnames(assays(tenx_pbmc.b)$counts) <- rownames(colData(tenx_pbmc.b))
rownames(colData(tenx_pbmc.c)) <- paste0('frozenC-',1:ncol(assays(tenx_pbmc.c)$counts))
colnames(assays(tenx_pbmc.c)$counts) <- rownames(colData(tenx_pbmc.c))
# assign Gene Symbol as rownames to count matrix
data.obs <- cbind(assays(tenx_pbmc.a)$counts,assays(tenx_pbmc.b)$counts,assays(tenx_pbmc.c)$counts)
gene.info<- rowData(tenx_pbmc.a)
rownames(gene.info)<- rowData(tenx_pbmc.a)$Symbol_TENx
rownames(data.obs) <- rowData(tenx_pbmc.a)$Symbol_TENx
sce <- SingleCellExperiment(assays=list(counts=data.obs),
colData=data.frame(rbind(colData(tenx_pbmc.a),colData(tenx_pbmc.b),colData(tenx_pbmc.c))),
rowData=gene.info)
common.genes <- intersect(rowData(tenx_pbmc.a)$ENSEMBL_ID,rowData(tenx_pbmc.b)$ENSEMBL_ID)
common.genes <- intersect(common.genes,rowData(tenx_pbmc.c)$ENSEMBL_ID)
length(common.genes)
tenx_pbmc.a  <- tenx_pbmc.a[common.genes,]
tenx_pbmc.b  <- tenx_pbmc.b[common.genes,]
tenx_pbmc.c  <- tenx_pbmc.c[common.genes,]
# assign names to cells
rownames(colData(tenx_pbmc.a)) <- paste0('frozenA-',1:ncol(assays(tenx_pbmc.a)$counts))
colnames(assays(tenx_pbmc.a)$counts) <- rownames(colData(tenx_pbmc.a))
rownames(colData(tenx_pbmc.b)) <- paste0('frozenB-',1:ncol(assays(tenx_pbmc.b)$counts))
colnames(assays(tenx_pbmc.b)$counts) <- rownames(colData(tenx_pbmc.b))
rownames(colData(tenx_pbmc.c)) <- paste0('frozenC-',1:ncol(assays(tenx_pbmc.c)$counts))
colnames(assays(tenx_pbmc.c)$counts) <- rownames(colData(tenx_pbmc.c))
# assign Gene Symbol as rownames to count matrix
data.obs <- cbind(assays(tenx_pbmc.a)$counts,assays(tenx_pbmc.b)$counts,assays(tenx_pbmc.c)$counts)
gene.info<- rowData(tenx_pbmc.a)
rownames(gene.info)<- rowData(tenx_pbmc.a)$Symbol_TENx
rownames(data.obs) <- rowData(tenx_pbmc.a)$Symbol_TENx
sce <- SingleCellExperiment(assays=list(counts=data.obs),
colData=data.frame(rbind(colData(tenx_pbmc.a),colData(tenx_pbmc.b),colData(tenx_pbmc.c))),
rowData=gene.info)
sce
saveRDS(sce,file='/home/asalim/poisRUV/analysis/10XpbmcFZ/tenx_pbmc_frozen_abc.rds')
# normalize using scran and build initial clustering
require(scran)
data.obs <- as.matrix(assays(sce)$counts)
sf <- scran::computeSumFactors(data.obs)
sce$scran.sf <- sf
data.norm <- sweep(data.obs,2,sf,'/')
assays(sce)$logcounts <- log(data.norm+1)
# perform initial clustering based on scran normalization
# this is to perform initial replicates
snn_gr <- buildSNNGraph(sce, assay.type = "logcounts")
clusters <- igraph::cluster_louvain(snn_gr)
sce$cluster.init <- factor(clusters$membership)
sce=runUMAP(sce)
plotUMAP(sce,colour_by='ctype.init',point_size=0.6)  + facet(~sce$Individual)
# find out cell-type for each cluster
require(SingleR)
ref.se <- HumanPrimaryCellAtlasData()
# annotate cluster
pred.10xpbmc.init  <- SingleR(test = sce, ref = ref.se, labels = ref.se$label.fine,assay.type.test='logcounts',method='cluster',clusters=factor(sce$cluster.init))
sce$ctype.init <- pred.10xpbmc.init$labels[sce$cluster.init]
# plot colored by factors
plotUMAP(sce,colour_by='ctype.init',point_size=0.6)  + facet(~sce$Individual)
require(ggplot2)
require(reshape2)
plotUMAP(sce,colour_by='ctype.init',point_size=0.6)  + facet(~sce$Individual)
require(ggplot2)
require(reshape2)
plotUMAP(sce,colour_by='ctype.init',point_size=0.6)
require(ggplot2)
require(reshape2)
plotUMAP(sce,colour_by='ctype.init',point_size=0.6)  + facet_wrap(~sce$Individual)
table(sce$Individual,sce$ctype.init)
pred.10xpbmc.init  <- SingleR(test = sce, ref = ref.se, labels = ref.se$label.main,assay.type.test='logcounts',method='cluster',clusters=factor(sce$cluster.init))
sce$ctype.init <- pred.10xpbmc.init$labels[sce$cluster.init]
require(ggplot2)
require(reshape2)
plotUMAP(sce,colour_by='ctype.init',point_size=0.6)  + facet_wrap(~sce$Individual)
plotUMAP(sce,colour_by='Individual',point_size=0.6)
sce
plotUMAP(sce,colour_by='ctype.init',point_size=0.6)
sce=runPCA(sce)
plotPCA(sce,colour_by='ctype.init',point_size=0.6)  + facet_wrap(~sce$Individual)
plotPCA(sce,colour_by='Individual',point_size=0.6)
plotPCA(sce,colour_by='Individual',point_size=0.1)
table(sce$Individual)
table(sce$Individual,sce$ctype.init)
rownames(assays(sce)$counts)[1:10]
sce$Individual=as.character(sce$Individual)
plotPCA(sce,colour_by='Individual',point_size=0.6)
plotPCA(sce,colour_by='ctype.init',point_size=0.6)
ctl <- read.csv('/home/asalim/poisRUV/analysis/chen/scHK_human.csv', header=T)[,1]
data.obs <- assays(sce)$counts
data.obs <- assays(sce)$logcounts
W <- irlba::irlba(data.obs,nv=5)$v
plot(W[,1],sce$log10_total_counts,cex=0.1)
plot(W[,2:3],col=as.numeric(factor(sce$Individual)),cex=0.1)
W <- irlba::irlba(data.obs[ctl,],nv=5)$v
plot(W[,2:3],col=as.numeric(factor(sce$Individual)),cex=0.1)
plot(W[,2:3],col=as.numeric(factor(sce$Individual)))
sce$logLS = log10(colSums(assays(sce)$counts))
plot(W[,1],sce$logLS,cex=0.1)
plotPCA(sce,colour_by='logLS',point_size=0.6)  + facet_wrap(~sce$Individual)
?runUMAP
ncells <- ncol(assays(sce)$counts)
sel.cells <- sample(c(0,1),prob=c(0.85,0.15),replace=TRUE,size=ncells)
sub    <- subset(sce,select=as.logical(sel.cells))
sub
plotUMAP(sce,colour_by='ctype.init',point_size=0.6)  + facet_wrap(~sce$Individual)
M <- matrix(0,ncells,1)
M[,1] <- sub$ctype.init=='B_cell'
ncells <- ncol(assays(sub)$counts)
M <- matrix(0,ncells,1)
M[,1] <- sub$ctype.init=='B_cell'
mode(M) <- 'logical'
# for other cells
M.others <- matrix(0,nrow(M),nrow(M)-sum(apply(M,2,sum)))
cell.post<- which(rowSums(M)==0)
M.others[cbind(cell.post, rank(cell.post))] <- 1
mode(M.others) <- 'logical'
combine
M <- cbind(M,M.others)
dim(M)
table(sub$ctype.init=='B_cell')
K <- 3
# ruvIIInb
ctl <- read.csv('/home/asalim/poisRUV/analysis/chen/scHK_human.csv', header=T)[,1]
out <- ruvIIInb::ruvIII.nb(as.matrix(assays(sub)$counts),M=M,ctl=ctl,k=K,ncores=2)
plot(out$W[,1],sub$logLS,cex=0.1)
plot(out$W[,2:3],col=as.numeric(factor(sub$Individual)),cex=0.1)
plot(out$W[,1:2],col=as.numeric(factor(sub$Individual)),cex=0.1)
cor(out$W)
K <- 3
# ruvIIInb
ctl <- read.csv('/home/asalim/poisRUV/analysis/chen/scHK_human.csv', header=T)[,1]
out <- ruvIIInb::ruvIII.nb(as.matrix(assays(sub)$counts),M=M,ctl=ctl,k=2,ncores=2)
sce.ruv3nb=ruvIIInb::makeSCE(out,colData(sub))
sce.ruv3nb=runUMAP(sce.ruv3nb,exprs_values='lquantile')
plotUMAP(sce.ruv3nb,colour_by='Individual',point_size=0.6)
plotUMAP(sce.ruv3nb,colour_by='ctype.init',point_size=0.6)
sce.ruv3nb=runUMAP(sce.ruv3nb,exprs_values='pearson')
plotUMAP(sce.ruv3nb,colour_by='Individual',point_size=0.6)
plotUMAP(sce.ruv3nb,colour_by='ctype.init',point_size=0.6)
plotUMAP(sub,colour_by='Individual',point_size=0.6)
sce.ruv3nb=runPCA(sce.ruv3nb,exprs_values='lquantile')
plotPCA(sub,colour_by='Individual',point_size=0.6)
plotUMAP(sub,colour_by='ctype.init',point_size=0.6)
table(sub$ctype.init,sub$Individual)
out.hmny <- harmony::HarmonyMatrix(expm1(assays(sub)$logcounts),meta_data=data.frame(colData(sub)),vars_use='Individual')
reducedDim(sub,type='harmony')=out.hmny
plotReducedDim(sub,dimred='harmony',colour_by="Individual",point_size=0.6)
plotReducedDim(sub,dimred='ctype.init',colour_by="Individual",point_size=0.6)
plotReducedDim(sub,dimred='harmony',colour_by="ctype.init",point_size=0.6)
plotReducedDim(sub,dimred='PCA',colour_by="ctype.init",point_size=0.6)
dim(out.hmny)
assays(sub)$harmony=out.hmny
sce.ruv3nb=runPCA(sce.ruv3nb,exprs_values='lquantile2')
plotUMAP(sce.ruv3nb,colour_by='Individual',point_size=0.6)
sce.ruv3nb=runUMAP(sce.ruv3nb,exprs_values='lquantile2')
plotUMAP(sce.ruv3nb,colour_by='Individual',point_size=0.6)
?harmony::HarmonyMatrix
out.hmny <- harmony::HarmonyMatrix(expm1(assays(sub)$logcounts),meta_data=data.frame(colData(sub)),vars_use='Individual',return_object = TRUE)
summary(out.hmny)
dim(out.hmnyt$Y
)
dim(out.hmny$Y)
out.hmny <- harmony::HarmonyMatrix(expm1(assays(sub)$logcounts),meta_data=data.frame(colData(sub)),vars_use='Individual')
dim(out.hmny)
reducedDim(sub,type='harmony_umap') <- calculateUMAP(t(out.hmny))
plotReducedDim(sub,dimred='harmony_umap',colour_by="ctype.init",point_size=0.6)
plotReducedDim(sub,dimred='harmony_umap',colour_by="Individual",point_size=0.6)
K <- 3
# ruvIIInb
ctl <- read.csv('/home/asalim/poisRUV/analysis/chen/scHK_human.csv', header=T)[,1]
ou$logl;out <- ruvIIInb::ruvIII.nb(as.matrix(assays(sub)$counts),M=M,ctl=ctl,k=K,ncores=2,step.fac=0.1,batch=as.numeric(sub$Individual)))
K <- 2
# ruvIIInb
ctl <- read.csv('/home/asalim/poisRUV/analysis/chen/scHK_human.csv', header=T)[,1]
out$logl;out <- ruvIIInb::ruvIII.nb(as.matrix(assays(sub)$counts),M=M,ctl=ctl,k=K,ncores=2,step.fac=0.1,batch=as.numeric(sub$Individual)))
K <- 2
# ruvIIInb
ctl <- read.csv('/home/asalim/poisRUV/analysis/chen/scHK_human.csv', header=T)[,1]
out$logl;out <- ruvIIInb::ruvIII.nb(as.matrix(assays(sub)$counts),M=M,ctl=ctl,k=K,ncores=2,step.fac=0.1,batch=as.numeric(sub$Individual))
summary(rowMeans(assays(sub)$counts))
subsubset(sub,rowMeans(assays(sub)$counts)>0.1)
sub=subset(sub,rowMeans(assays(sub)$counts)>0.1)
sub
K <- 2
# ruvIIInb
ctl <- read.csv('/home/asalim/poisRUV/analysis/chen/scHK_human.csv', header=T)[,1]
out$logl;out <- ruvIIInb::ruvIII.nb(as.matrix(assays(sub)$counts),M=M,ctl=ctl,k=K,ncores=2,step.fac=0.1,batch=as.numeric(sub$Individual))
sub=subset(sce,select=as.logical(sel.cells))
sub
sub=subset(sub,rowMeans(assays(sub)$counts)>0.01)
sub
K <- 2
# ruvIIInb
ctl <- read.csv('/home/asalim/poisRUV/analysis/chen/scHK_human.csv', header=T)[,1]
out$logl;out <- ruvIIInb::ruvIII.nb(as.matrix(assays(sub)$counts),M=M,ctl=ctl,k=K,ncores=2,step.fac=0.1,batch=as.numeric(sub$Individual))
K <- 2
# ruvIIInb
ctl <- read.csv('/home/asalim/poisRUV/analysis/chen/scHK_human.csv', header=T)[,1]
out$logl;out <- ruvIIInb::ruvIII.nb(as.matrix(assays(sub)$counts),M=M,ctl=ctl,k=K,ncores=2,step.fac=0.1,batch=as.numeric(factor(sub$Individual)))
K <- 1
# ruvIIInb
ctl <- read.csv('/home/asalim/poisRUV/analysis/chen/scHK_human.csv', header=T)[,1]
out$logl;out1 <- ruvIIInb::ruvIII.nb(as.matrix(assays(sub)$counts),M=M,ctl=ctl,k=K,ncores=2,step.fac=0.1,batch=as.numeric(factor(sub$Individual)))
K <- 1
# ruvIIInb
ctl <- read.csv('/home/asalim/poisRUV/analysis/chen/scHK_human.csv', header=T)[,1]
out$logl;out1 <- ruvIIInb::ruvIII.nb(as.matrix(assays(sub)$counts),M=M,ctl=ctl,k=K,ncores=2,step.fac=0.1)
sce.ruv3nb=runPCA(sce.ruv3nb,exprs_values='lquantile')
reducedDim(sce.ruv3nb,type="umap_pca") <- calculateUMAP(reducedDim(sce.ruv3nb,dimred='pca'))
reducedDim(sce.ruv3nb,type="umap_pca") <- calculateUMAP(reducedDim(sce.ruv3nb,type ='pca'))
reducedDim(sce.ruv3nb,type="umap_pca") <- calculateUMAP(reducedDim(sce.ruv3nb,type ='PCA'))
reducedDim(sce.ruv3nb,type="umap_pca") <- calculateUMAP(t(reducedDim(sce.ruv3nb,type ='PCA')))
plotReducedDim(sce.ruv3nb,dimred='umap_pca',colour_by="Individual",point_size=0.6)
dim(reducedDim(sce.ruv3nb,type ='PCA'))
out.hmny <- harmony::HarmonyMatrix(expm1(assays(sub)$logcounts),meta_data=data.frame(colData(sub)),vars_use='Individual',npcs=50)
dim(out.hmny)
reducedDim(sub,type='harmony_umap') <- calculateUMAP(t(out.hmny))
plotReducedDim(sub,dimred='harmony_umap',colour_by="Individual",point_size=0.6)
sce.ruv3nb.1 = ruvIIInb::makeSCE(out1,colData(sub))
sce.ruv3nb.1 = runUMAP(sce.ruv3nb.1,exprs_values='lquantile')
plotUMAP(sce.ruv3nb.1,colour_by='Individual',point_size=0.6)
plotUMAP(sce.ruv3nb.1,colour_by='ctype.init',point_size=0.6)
K <- 3
# ruvIIInb
ctl <- read.csv('/home/asalim/poisRUV/analysis/chen/scHK_human.csv', header=T)[,1]
out$logl;out2 <- ruvIIInb::ruvIII.nb(as.matrix(assays(sub)$counts),M=M,ctl=ctl,k=K,ncores=2,step.fac=0.1,batch=as.numeric(sub$Individual))
dim(M)
K <- 5
# ruvIIInb
ctl <- read.csv('/home/asalim/poisRUV/analysis/chen/scHK_human.csv', header=T)[,1]
out$logl;out2 <- ruvIIInb::ruvIII.nb(as.matrix(assays(sub)$counts),M=M,ctl=ctl,k=K,ncores=2,step.fac=0.1)
K <- 1
# ruvIIInb
ctl <- read.csv('/home/asalim/poisRUV/analysis/chen/scHK_human.csv', header=T)[,1]
out$logl;out2 <- ruvIIInb::ruvIII.nb(as.matrix(assays(sub)$counts),M=M,ctl=ctl,k=K,ncores=2,step.fac=0.5,batch=as.numeric(factor(sub$Individual)))
K <- 2
# ruvIIInb
ctl <- read.csv('/home/asalim/poisRUV/analysis/chen/scHK_human.csv', header=T)[,1]
out$logl;out2 <- ruvIIInb::ruvIII.nb(as.matrix(assays(sub)$counts),M=M,ctl=ctl,k=K,ncores=2,step.fac=0.5,batch=as.numeric(factor(sub$Individual)))
lfproc
edgeR::lfproc
nchar('Ganggu$$01')
x=rnorm(100)
y=rbinom(100,size=1,prob=0.5)
kruskal.test(x~y)
cluster::silhouette(y,dist(x))
z=rep(0,100)
cluster::silhouette(z,dist(x))
cluster::silhouette(z,dist(x))[,3]
Xvar=model.matrix(~y+z)
Xvar=model.matrix(~y+z)[,-1]
cancor(x=cbind(x,x^2),y=Xvar)
getwd()
?segments
x <- stats::runif(12); y <- stats::rnorm(12)
i <- order(x, y); x <- x[i]; y <- y[i]
plot(x, y, main = "arrows(.) and segments(.)")
## draw arrows from point to point :
s <- seq(length(x)-1)  # one shorter than data
arrows(x[s], y[s], x[s+1], y[s+1], col= 1:3)
s <- s[-length(s)]
segments(x[s], y[s], x[s+2], y[s+2], col= 'pink')
require(ruvIIInb)
vignette(package='ruvIIInb')
install_github("limfuxing/ruvIIInb,build_vignette=TRUE")
devtools::install_github("limfuxing/ruvIIInb,build_vignette=TRUE")
devtools::install_github("limfuxing/ruvIIInb",build_vignette=TRUE)
devtools::install_github("limfuxing/ruvIIInb",build_vignette=TRUE,force=TRUE)
require(ruvIIInb)
vignette(package='ruvIIInb')
?vignette
vignette("Introduction",package='ruvIIInb')
?ci.pred
ci.pred
require(ruvIIInb)
vignette('Introduction',package='ruvIIInb')
?scran::modelGeneVar
BiocManager::install('dino')
devtools::install_github("JBrownBiostat/Dino", build_vignettes = TRUE)
devtools::install_github('theislab/kBET')
require(ruvIIInb)
vignnette(pkgs='ruvIIInb')
vignette(pkgs='ruvIIInb')
vignette(package='ruvIIInb')
vignette('ruvIIInbVignette ',package='ruvIIInb')
vignette('ruvIIInbVignette',package='ruvIIInb')
require(ruvIIInb)
vignette('ruvIIInbVignette',package='ruvIIInb'
)
vignette('ruvIIInbVignette',package='ruvIIInb')
require(ruvIIInb)
setwd('/home/asalim/poisRUV/github')
setwd('./ruvIIInb')
# before creating documentation
devtools::document()
